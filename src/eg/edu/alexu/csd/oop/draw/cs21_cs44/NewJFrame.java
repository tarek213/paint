/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eg.edu.alexu.csd.oop.draw.cs21_cs44;

import eg.edu.alexu.csd.oop.draw.DrawingEngine;
import eg.edu.alexu.csd.oop.draw.Shape;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author arabtech
 */
public class NewJFrame extends javax.swing.JFrame {
	private String currentorder = "Square";
	private Color borderColor = Color.BLUE;
	private Color fillColor = Color.BLACK;
	private SellectionDetector sellectionDetector = new SellectionDetector();
	private Draw draw = new Draw();

	/**
	 * Creates new form NewJFrame
	 */
	public NewJFrame() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();
		jButton3 = new javax.swing.JButton();
		jButton4 = new javax.swing.JButton();
		jTextField1 = new javax.swing.JTextField();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			public void mouseDragged(java.awt.event.MouseEvent evt) {
				formMouseDragged(evt);
			}
		});
		addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				formMouseClicked(evt);
			}

			public void mousePressed(java.awt.event.MouseEvent evt) {
				try {
					formMousePressed(evt);
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (NoSuchMethodException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (SecurityException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InstantiationException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

			public void mouseReleased(java.awt.event.MouseEvent evt) {
				formMouseReleased(evt);
			}
		});

		jButton1.setText("jButton1");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		jButton2.setText("jButton2");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		jButton3.setText("jButton3");
		jButton3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton3ActionPerformed(evt);
			}
		});

		jButton4.setText("jButton4");
		jButton4.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton4ActionPerformed(evt);
			}
		});

		jTextField1.setText("jTextField1");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addGap(35, 35, 35).addComponent(jButton1).addGap(73, 73, 73)
						.addComponent(jButton2)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 568, Short.MAX_VALUE)
						.addComponent(jButton3).addGap(96, 96, 96).addComponent(jButton4).addGap(54, 54, 54))
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(141, 141, 141)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup().addGap(70, 70, 70)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jButton1).addComponent(jButton2).addComponent(jButton4)))
								.addGroup(layout.createSequentialGroup().addContainerGap()
										.addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(22, 22, 22).addComponent(jButton3)))
						.addContainerGap(615, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
		d.undo();
		repaint();
	}// GEN-LAST:event_jButton1ActionPerformed

	double x1, y1, x2, y2;
	private Shape s;
	private Shape s1;
	private String type;

	private void formMousePressed(java.awt.event.MouseEvent evt)
			throws ClassNotFoundException, NoSuchMethodException, SecurityException, InstantiationException,
			IllegalAccessException, IllegalArgumentException, InvocationTargetException {// GEN-FIRST:event_formMousePressed

		x1 = evt.getXOnScreen();
		y1 = evt.getYOnScreen();
		if(currentorder=="Delete") {
			s = sellectionDetector.detectSellection((int) x1, (int) y1, d.getShapes());
			d.removeShape(s);
		}else if (currentorder == "Rectangle") {
			s = draw.CreateRectangle(x1, y1, borderColor, fillColor);
			d.addShape(s);
		} else if (currentorder == "Square") {
			s = draw.CreateSquare(x1, y1, borderColor, fillColor);
			d.addShape(s);
		} else if (currentorder == "Circle") {
			s = draw.CreateCircle(x1, y1, borderColor, fillColor);
			d.addShape(s);
		} else if (currentorder == "Line") {
			s = draw.CreateLine(x1, y1, borderColor);
			d.addShape(s);
		} else if (currentorder == "Ellipse") {
			s = draw.CreateEllipse(x1, y1, borderColor, fillColor);
			d.addShape(s);
		} else if (currentorder == "Triangle") {
			s = draw.CreateTriangle(x1, y1, borderColor, fillColor);
			d.addShape(s);
		} else if (currentorder == "select") {
			s = sellectionDetector.detectSellection((int) x1, (int) y1, d.getShapes());
		} else if (currentorder == "Copy") {
			try {
				s1 = (Shape) sellectionDetector.detectSellection((int) x1, (int) y1, d.getShapes()).clone();
			} catch (CloneNotSupportedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else if (currentorder == "Resize") {
			s = sellectionDetector.detectSellection((int) x1, (int) y1, d.getShapes());
			type = s.getClass().getSimpleName();
			Map<String, Double> m = new HashMap<>();
			m = s.getProperties();
			if (type == "Trianlge") {
				x1 = m.get("pointAX");
				y1 = m.get("pointAY");
			} else if (type == "Line") {
				x1 = m.get("pointAX");
				y1 = m.get("pointAY");
			} else {
				x1 = m.get("cX");
				y1 = m.get("cY");
			}
		} else if (currentorder == "ChangeColor") {
			s = sellectionDetector.detectSellection((int) x1, (int) y1, d.getShapes());
			s.setColor(borderColor);
			s.setFillColor(fillColor);
		} else if (currentorder == "Move") {
			s = sellectionDetector.detectSellection((int) x1, (int) y1, d.getShapes());
		} else if (currentorder == "Paste") {
			Class<?> clas = Class.forName(s1.getClass().getName());
			Constructor<?> con = clas.getConstructor();
			Shape shape = (Shape) con.newInstance();
			shape.setProperties(s1.getProperties());
			Point pos = new Point((int) x1, (int) y1);
			shape.setPosition(pos);
			d.addShape(shape);
		}

	}// GEN-LAST:event_formMousePressed

	private void formMouseReleased(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_formMouseReleased
		x2 = evt.getXOnScreen();
		y2 = evt.getYOnScreen();
		if (currentorder == "Rectangle") {
			draw.paintRectangle(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Square") {
			draw.paintSquare(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Circle") {
			draw.paintCircle(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Line") {
			draw.paintLine(s, x1, y1, x2, y2, borderColor);
		} else if (currentorder == "Ellipse") {
			draw.paintEllipse(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Triangle") {
			draw.paintTriangle(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Move") {
			Point pos = new Point((int) x2, (int) y2);
			s.setPosition(pos);
		} else if (currentorder == "Resize") {
			if (type == "Square") {
				draw.paintSquare(s, x1, y1, x2, y2, borderColor, fillColor);
			} else if (type == "Rectangle") {
				draw.paintRectangle(s, x1, y1, x2, y2, borderColor, fillColor);
			} else if (type == "Circle") {
				draw.paintCircle(s, x1, y1, x2, y2, borderColor, fillColor);
			} else if (type == "Ellipse") {
				draw.paintEllipse(s, x1, y1, x2, y2, borderColor, fillColor);
			} else if (type == "Line") {
				draw.paintLine(s, x1, y1, x2, y2, borderColor);
			} else if (type == "Triangle") {
				draw.paintTriangle(s, x1, y1, x2, y2, borderColor, fillColor);
			}
		}

		repaint();
	}// GEN-LAST:event_formMouseReleased

	private void formMouseDragged(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_formMouseDragged
		x2 = evt.getXOnScreen();
		y2 = evt.getYOnScreen();
		if (currentorder == "Rectangle") {
			draw.paintRectangle(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Square") {
			draw.paintSquare(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Circle") {
			draw.paintCircle(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Line") {
			draw.paintLine(s, x1, y1, x2, y2, borderColor);
		} else if (currentorder == "Ellipse") {
			draw.paintEllipse(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Triangle") {
			draw.paintTriangle(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Move") {
			Point pos = new Point((int) x2, (int) y2);
			s.setPosition(pos);
		}

		repaint();
	}// GEN-LAST:event_formMouseDragged

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton2ActionPerformed
		d.redo();
		repaint();
	}// GEN-LAST:event_jButton2ActionPerformed

	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton3ActionPerformed
		d.save(jTextField1.getText());
		repaint();
	}// GEN-LAST:event_jButton3ActionPerformed

	private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton4ActionPerformed
		d.load(jTextField1.getText());
		repaint();
	}// GEN-LAST:event_jButton4ActionPerformed

	private void formMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_formMouseClicked

	}// GEN-LAST:event_formMouseClicked

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new NewJFrame().setVisible(true);
			}
		});
	}

	DrawingEngine d = new Controller();

	public void paint(Graphics g) {
		super.paint(g); // To change body of generated methods, choose Tools | Templates.
		d.refresh(g);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	private javax.swing.JButton jButton4;
	private javax.swing.JTextField jTextField1;
	// End of variables declaration//GEN-END:variables
}
