package eg.edu.alexu.csd.oop.draw.cs21_cs44;

import eg.edu.alexu.csd.oop.draw.DrawingEngine;
import eg.edu.alexu.csd.oop.draw.Shape;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author elshamey
 */
public class gui extends javax.swing.JFrame {

    /**
     * Creates new form gui
     */
    public gui() {
        initComponents();
    }
    private String currentorder = "Square";
	private java.awt.Color borderColor = java.awt.Color.BLUE;
	private java.awt.Color fillColor = java.awt.Color.BLACK;

    public Color getBorderColor() {
        return borderColor;
    }

    public void setBorderColor(Color borderColor) {
        this.borderColor = borderColor;
    }

    public Color getFillColor() {
        return fillColor;
    }

    public void setFillColor(Color fillColor) {
        this.fillColor = fillColor;
    }
    
	private SellectionDetector sellectionDetector = new SellectionDetector();
	private Draw draw = new Draw();
    double x1, y1, x2, y2;
	private Shape s;
	private Shape s1;
        private Shape s3;
	private String type;
        private Drawtemp drawtemp=new Drawtemp();
        Color tempborder,tempfill;
        DrawingEngine d = new Controller();
private Map<String,Double> createMap(Map<String ,Double>m){
    Map<String,Double> s=new HashMap<>();
   for( String key : m.keySet()){
       String key1;
       Double val;
       key1=key;
       val=m.get(key);
       s.put(key1, val);
     //  System.out.println(key1+"  "+val);
   }
   return s;
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel1.setBounds(0, 0, 0, 0);
        jPanel2 = new javax.swing.JPanel();
        jPanel2.setBounds(54, 11, 172, 124);
        jLabel1 = new javax.swing.JLabel();
        drawRectangle = new javax.swing.JLabel();
        drawSquare = new javax.swing.JLabel();
        drawEllipse = new javax.swing.JLabel();
        drawTriangle = new javax.swing.JLabel();
        drawCircle = new javax.swing.JLabel();
        drawLine = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel3.setBounds(299, 11, 119, 130);
        jLabel8 = new javax.swing.JLabel();
        copy = new javax.swing.JLabel();
        select = new javax.swing.JLabel();
        paste = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel4.setBounds(504, 11, 119, 130);
        jLabel12 = new javax.swing.JLabel();
        move = new javax.swing.JLabel();
        resize = new javax.swing.JLabel();
        changeColor = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel5.setBounds(663, 11, 140, 130);
        jLabel13 = new javax.swing.JLabel();
        save = new javax.swing.JLabel();
        load = new javax.swing.JLabel();
        color = new javax.swing.JLabel();
        color.setBounds(874, 15, 65, 126);
        jLabel2 = new javax.swing.JLabel();
        jLabel2.setBounds(968, 31, 50, 71);
        jLabel3 = new javax.swing.JLabel();
        jLabel3.setBounds(1069, 41, 59, 51);
        jLabel4 = new javax.swing.JLabel();
        jLabel4.setBounds(1134, 31, 50, 71);
        jLabel5 = new javax.swing.JLabel();
        jLabel5.setBounds(1215, 44, 50, 50);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel1MouseReleased(evt);
            }
        });
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1KeyPressed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(250, 252, 250));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Shapes");

        drawRectangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/rect.png"))); // NOI18N
        drawRectangle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawRectangleMouseClicked(evt);
            }
        });

        drawSquare.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/square.png"))); // NOI18N
        drawSquare.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawSquareMouseClicked(evt);
            }
        });

        drawEllipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/ellipse.png"))); // NOI18N
        drawEllipse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawEllipseMouseClicked(evt);
            }
        });

        drawTriangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/tring.png"))); // NOI18N
        drawTriangle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawTriangleMouseClicked(evt);
            }
        });

        drawCircle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/circle.png"))); // NOI18N
        drawCircle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawCircleMouseClicked(evt);
            }
        });

        drawLine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/line.png"))); // NOI18N
        drawLine.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawLineMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(drawLine)
                            .addComponent(drawCircle))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(drawEllipse)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(drawSquare)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(drawTriangle)
                            .addComponent(drawRectangle, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(drawSquare)
                            .addComponent(drawRectangle))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(drawEllipse)
                            .addComponent(drawTriangle)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(drawLine)
                        .addGap(18, 18, 18)
                        .addComponent(drawCircle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(250, 252, 250));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Tools");

        copy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/cooop.png"))); // NOI18N
        copy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                copyMouseClicked(evt);
            }
        });

        select.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/select.png"))); // NOI18N
        select.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectMouseClicked(evt);
            }
        });

        paste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/pppppaaa.png"))); // NOI18N
        paste.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pasteMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(select)
                        .addGap(18, 18, 18)
                        .addComponent(paste, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(copy)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(copy, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(paste)
                    .addComponent(select)))
        );

        jPanel4.setBackground(new java.awt.Color(250, 252, 250));

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Tools");

        move.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/Webp.net-resizeimage (6).png"))); // NOI18N
        move.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moveMouseClicked(evt);
            }
        });

        resize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/tools (3).png"))); // NOI18N
        resize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resizeMouseClicked(evt);
            }
        });

        changeColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/Webp.net-resizeimage (8).png"))); // NOI18N
        changeColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                changeColorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(move)
                        .addGap(18, 18, 18)
                        .addComponent(changeColor, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(resize)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addGap(14, 14, 14)
                .addComponent(resize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(move)
                    .addComponent(changeColor))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(250, 252, 250));

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("save and load");

        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/Webp.net-resizeimage (9).png"))); // NOI18N
        save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveMouseClicked(evt);
            }
        });

        load.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/Webp.net-resizeimage (10).png"))); // NOI18N
        load.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(save)
                        .addGap(18, 18, 18)
                        .addComponent(load))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(save)
                    .addComponent(load))
                .addGap(24, 24, 24))
        );

        color.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/Webp.net-resizeimage (11).png"))); // NOI18N
        color.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                colorMouseClicked(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/refresh.png"))); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/Webp.net-resizeimage (12).png"))); // NOI18N
        jLabel3.setText("undo");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/redo.jpg"))); // NOI18N
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eg/edu/alexu/csd/oop/draw/cs21_cs44/Webp.net-resizeimage (13).png"))); // NOI18N
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        getContentPane().add(jPanel1);
        jPanel1.setLayout(null);
        jPanel1.add(jPanel2);
        jPanel1.add(jPanel3);
        jPanel1.add(jPanel4);
        jPanel1.add(jPanel5);
        jPanel1.add(color);
        jPanel1.add(jLabel2);
        jPanel1.add(jLabel3);
        jPanel1.add(jLabel4);
        jPanel1.add(jLabel5);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void changeColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changeColorMouseClicked
        // TODO add your handling code here:
        currentorder="ChangeColor";
    }//GEN-LAST:event_changeColorMouseClicked

    private void colorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorMouseClicked
        // TODO add your handling code here:
        Colors colors = new Colors(this);
        colors.setVisible(true);
    }//GEN-LAST:event_colorMouseClicked

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        // TODO add your handling code here:
        x1 = evt.getXOnScreen();
		y1 = evt.getYOnScreen();
		if(currentorder=="Delete") {
			s = sellectionDetector.detectSellection((int) x1, (int) y1, d.getShapes());
			d.removeShape(s);
		}else if (currentorder == "Rectangle") {
			s = draw.CreateRectangle(x1, y1, borderColor, fillColor);
			d.addShape(s);
		} else if (currentorder == "Square") {
			s = draw.CreateSquare(x1, y1, borderColor, fillColor);
			d.addShape(s);
		} else if (currentorder == "Circle") {
			s = draw.CreateCircle(x1, y1, borderColor, fillColor);
			d.addShape(s);
		} else if (currentorder == "Line") {
			s = draw.CreateLine(x1, y1, borderColor);
			d.addShape(s);
		} else if (currentorder == "Ellipse") {
			s = draw.CreateEllipse(x1, y1, borderColor, fillColor);
			d.addShape(s);
		} else if (currentorder == "Triangle") {
			s = draw.CreateTriangle(x1, y1, borderColor, fillColor);
			d.addShape(s);
		} else if (currentorder == "select") {
			s = sellectionDetector.detectSellection((int) x1, (int) y1, d.getShapes());
                        if(s==null){
                            System.out.println("empty");
                        }
		} else if (currentorder == "Copy") {
			try {
				s1 = (Shape) sellectionDetector.detectSellection((int) x1, (int) y1, d.getShapes()).clone();
			} catch (CloneNotSupportedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else if (currentorder == "Resize") {
			s = sellectionDetector.detectSellection((int) x1, (int) y1, d.getShapes());
			if(Triangle.class.isAssignableFrom(s.getClass())) {
				s3=new Triangle();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                               s3.setProperties(m);
                               x1 = m.get("pointAX");
				y1 = m.get("pointAY");
			}else if(Square.class.isAssignableFrom(s.getClass())) {
				s3=new Square();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                                s3.setProperties(m);
                                x1 = m.get("cX");
				y1 = m.get("cY");
			}else if(Rectangle.class.isAssignableFrom(s.getClass())) {
				s3=new Rectangle();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                                s3.setProperties(m);
                               x1 = m.get("cX");
				y1 = m.get("cY");
			}else if(Circle.class.isAssignableFrom(s.getClass())) {
				 s3=new Circle();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                                s3.setProperties(m);
                                x1 = m.get("cX");
				y1 = m.get("cY");
			}else if(Ellipse.class.isAssignableFrom(s.getClass())) {
				s3=new Ellipse();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                                s3.setProperties(m);
                                //System.out.println(s3.getColor().getRGB()+"  "+s3.getFillColor().getRGB());
                        x1 = m.get("cX");
				y1 = m.get("cY");
			}else if(Line.class.isAssignableFrom(s.getClass())) {
				s3=new Line();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                                s3.setProperties(m);
                                x1 = m.get("pointAX");
				y1 = m.get("pointAY");
                                                      
			}
                        tempborder=new Color(s.getProperties().get("borderColor").intValue());
                        tempfill=new Color(s.getProperties().get("fillInColor").intValue());
                        s.setColor(Color.WHITE);
                       s.setFillColor(Color.WHITE);
			//Map<String, Double> m = new HashMap<>();
			//m = s.getProperties();
			/*if (Triangle.class.isAssignableFrom(s.getClass())) {
				
			} else if (Line.class.isAssignableFrom(s.getClass())) {
				
			} else {
				
			}*/
		} else if (currentorder == "ChangeColor") {
			s = sellectionDetector.detectSellection((int) x1, (int) y1, d.getShapes());
                        if(Triangle.class.isAssignableFrom(s.getClass())) {
				Shape copy=new Triangle();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                                copy.setProperties(m);
                               copy.setColor(borderColor);
			copy.setFillColor(fillColor);
                        d.updateShape(s, copy);
			}else if(Square.class.isAssignableFrom(s.getClass())) {
				Shape copy=new Square();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                                copy.setProperties(m);
                                copy.setColor(borderColor);
			copy.setFillColor(fillColor);
                        d.updateShape(s, copy);
			}else if(Rectangle.class.isAssignableFrom(s.getClass())) {
				Shape copy=new Rectangle();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                                copy.setProperties(m);
                               copy.setColor(borderColor);
			copy.setFillColor(fillColor);
                        d.updateShape(s, copy);
			}else if(Circle.class.isAssignableFrom(s.getClass())) {
				Shape copy=new Circle();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                                copy.setProperties(m);
                                copy.setColor(borderColor);
			copy.setFillColor(fillColor);
                        d.updateShape(s, copy);
			}else if(Ellipse.class.isAssignableFrom(s.getClass())) {
				Shape copy=new Ellipse();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                                copy.setProperties(m);
                                copy.setColor(borderColor);
			copy.setFillColor(fillColor);
                        d.updateShape(s, copy);
			}else if(Line.class.isAssignableFrom(s.getClass())) {
				Shape copy=new Line();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                                copy.setProperties(m);
                                copy.setColor(borderColor);
                                d.updateShape(s, copy);                       
			}
			
		} else if (currentorder == "Move") {
			s = sellectionDetector.detectSellection((int) x1, (int) y1, d.getShapes());
                        System.out.println("/*/*/*/"+s.getClass().getSimpleName());
                        
                        if(Triangle.class.isAssignableFrom(s.getClass())) {
				s3=new Triangle();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                               s3.setProperties(m);
                               
			}else if(Square.class.isAssignableFrom(s.getClass())) {
				s3=new Square();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                                s3.setProperties(m);
                                
			}else if(Rectangle.class.isAssignableFrom(s.getClass())) {
				s3=new Rectangle();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                                s3.setProperties(m);
                               
			}else if(Circle.class.isAssignableFrom(s.getClass())) {
                            System.out.println("innnnnnnnnnnn");
                                s3=new Circle();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                                s3.setProperties(m);
                                
			}else if(Ellipse.class.isAssignableFrom(s.getClass())) {
				s3=new Ellipse();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                                s3.setProperties(m);
                                System.out.println(s3.getColor().getRGB()+"  "+s3.getFillColor().getRGB());
                        
			}else if(Line.class.isAssignableFrom(s.getClass())) {
				s3=new Line();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s.getProperties());
                                s3.setProperties(m);
                                
                                                      
			}
                        tempborder=new Color(s.getProperties().get("borderColor").intValue());
                        tempfill=new Color(s.getProperties().get("fillInColor").intValue());
                        s.setColor(Color.WHITE);
                       s.setFillColor(Color.WHITE);
		}
                else if (currentorder == "Paste") {
                    Point pos=new Point((int)x1, (int)y1);
                    if(Triangle.class.isAssignableFrom(s1.getClass())) {
				Shape copy=new Triangle();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s1.getProperties());
                                copy.setProperties(m);
                                copy.setPosition(pos);
                                d.addShape(copy);
			}else if(Square.class.isAssignableFrom(s1.getClass())) {
				Shape copy=new Square();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s1.getProperties());
                                copy.setProperties(m);
                                copy.setPosition(pos);
                                d.addShape(copy);
			}else if(Rectangle.class.isAssignableFrom(s1.getClass())) {
				Shape copy=new Rectangle();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s1.getProperties());
                                copy.setProperties(m);
                                copy.setPosition(pos);
                                d.addShape(copy);
			}else if(Circle.class.isAssignableFrom(s1.getClass())) {
				Shape copy=new Circle();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s1.getProperties());
                                copy.setProperties(m);
                                copy.setPosition(pos);
                                d.addShape(copy);
			}else if(Ellipse.class.isAssignableFrom(s1.getClass())) {
				Shape copy=new Ellipse();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s1.getProperties());
                                copy.setProperties(m);
                                copy.setPosition(pos);
                                d.addShape(copy);
			}else if(Line.class.isAssignableFrom(s1.getClass())) {
				Shape copy=new Line();
                                Map<String, Double> m = new HashMap<>();
                                m=createMap(s1.getProperties());
                                copy.setProperties(m);
                                copy.setPosition(pos);
                                d.addShape(copy);
			}
                   /* System.out.println("d5al gowa");
                    System.out.println(d.getShapes().length);
			Class<?> clas = null;
            try {
                clas = Class.forName(s1.getClass().getName());
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
			Constructor<?> con = null;
            try {
                con = clas.getConstructor();
            } catch (NoSuchMethodException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SecurityException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
			Shape shape = null;
            try {
                shape = (Shape) con.newInstance();
            } catch (InstantiationException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalArgumentException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvocationTargetException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
			shape.setProperties(s1.getProperties());
			Point pos = new Point((int) x1, (int) y1);
			shape.setPosition(pos);
			d.addShape(shape);*/
		}
    }//GEN-LAST:event_jPanel1MousePressed

    private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1KeyPressed

    private void jPanel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseReleased
        // TODO add your handling code here:
        x2 = evt.getXOnScreen();
		y2 = evt.getYOnScreen();
		if (currentorder == "Rectangle") {
			draw.paintRectangle(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Square") {
			draw.paintSquare(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Circle") {
			draw.paintCircle(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Line") {
			draw.paintLine(s, x1, y1, x2, y2, borderColor);
		} else if (currentorder == "Ellipse") {
			draw.paintEllipse(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Triangle") {
			draw.paintTriangle(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Move") {
			Point pos = new Point((int) x2, (int) y2);
			s3.setPosition(pos);
                        s.setColor(tempborder);
                        s.setFillColor(tempfill);
                        d.updateShape(s, s3);
                        s3=null;
		} else if (currentorder == "Resize") {
			if (Square.class.isAssignableFrom(s.getClass())) {
				draw.paintSquare(s3, x1, y1, x2, y2, borderColor, fillColor);
			} else if (Rectangle.class.isAssignableFrom(s.getClass())) {
				draw.paintRectangle(s3, x1, y1, x2, y2, borderColor, fillColor);
			} else if (Circle.class.isAssignableFrom(s.getClass())) {
				draw.paintCircle(s3, x1, y1, x2, y2, borderColor, fillColor);
			} else if (Ellipse.class.isAssignableFrom(s.getClass())) {
				draw.paintEllipse(s3, x1, y1, x2, y2, borderColor, fillColor);
			} else if (Line.class.isAssignableFrom(s.getClass())) {
				draw.paintLine(s3, x1, y1, x2, y2, borderColor);
			} else if (Triangle.class.isAssignableFrom(s.getClass())) {
				draw.paintTriangle(s3, x1, y1, x2, y2, borderColor, fillColor);
			}
                         s.setColor(tempborder);
                        s.setFillColor(tempfill);
                        d.updateShape(s, s3);
                        s3=null;
		}

		repaint();
    }//GEN-LAST:event_jPanel1MouseReleased

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        // TODO add your handling code here:
        x2 = evt.getXOnScreen();
		y2 = evt.getYOnScreen();
		if (currentorder == "Rectangle") {
			draw.paintRectangle(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Square") {
			draw.paintSquare(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Circle") {
			draw.paintCircle(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Line") {
			draw.paintLine(s, x1, y1, x2, y2, borderColor);
		} else if (currentorder == "Ellipse") {
			draw.paintEllipse(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Triangle") {
			draw.paintTriangle(s, x1, y1, x2, y2, borderColor, fillColor);
		} else if (currentorder == "Move") {
			Point pos = new Point((int) x2, (int) y2);
                        System.out.println(pos);
                        System.out.println(s3.getClass().getName());
			s3.setPosition(pos);
                        
                       
                       // System.out.println(s3.getColor()+"  "+s3.getFillColor());
		}else if (currentorder == "Resize") {
			if (Square.class.isAssignableFrom(s.getClass())) {
				draw.paintSquare(s3, x1, y1, x2, y2, borderColor, fillColor);
			} else if (Rectangle.class.isAssignableFrom(s.getClass())) {
				draw.paintRectangle(s3, x1, y1, x2, y2, borderColor, fillColor);
			} else if (Circle.class.isAssignableFrom(s.getClass())) {
				draw.paintCircle(s3, x1, y1, x2, y2, borderColor, fillColor);
			} else if (Ellipse.class.isAssignableFrom(s.getClass())) {
				draw.paintEllipse(s3, x1, y1, x2, y2, borderColor, fillColor);
			} else if (Line.class.isAssignableFrom(s.getClass())) {
				draw.paintLine(s3, x1, y1, x2, y2, borderColor);
			} else if (Triangle.class.isAssignableFrom(s.getClass())) {
				draw.paintTriangle(s3, x1, y1, x2, y2, borderColor, fillColor);
			}
		}

		repaint();
    }//GEN-LAST:event_jPanel1MouseDragged

    private void drawLineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawLineMouseClicked
        // TODO add your handling code here:
        currentorder="Line";
    }//GEN-LAST:event_drawLineMouseClicked

    private void drawSquareMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawSquareMouseClicked
        // TODO add your handling code here:
        currentorder="Square";
    }//GEN-LAST:event_drawSquareMouseClicked

    private void drawRectangleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawRectangleMouseClicked
        // TODO add your handling code here:
        currentorder="Rectangle";
    }//GEN-LAST:event_drawRectangleMouseClicked

    private void drawCircleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawCircleMouseClicked
        // TODO add your handling code here:
        currentorder="Circle";
    }//GEN-LAST:event_drawCircleMouseClicked

    private void drawEllipseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawEllipseMouseClicked
        // TODO add your handling code here:
        currentorder="Ellipse";
    }//GEN-LAST:event_drawEllipseMouseClicked

    private void drawTriangleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawTriangleMouseClicked
        // TODO add your handling code here:
        currentorder="Triangle";
    }//GEN-LAST:event_drawTriangleMouseClicked

    private void copyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copyMouseClicked
        // TODO add your handling code here:
        currentorder="Copy";
    }//GEN-LAST:event_copyMouseClicked

    private void pasteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pasteMouseClicked
       // TODO add your handling code here:
        currentorder ="Paste";
    }//GEN-LAST:event_pasteMouseClicked

    private void selectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectMouseClicked
        // TODO add your handling code here:
        currentorder="select";
    }//GEN-LAST:event_selectMouseClicked

    private void moveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveMouseClicked
        // TODO add your handling code here:
        currentorder="Move";
    }//GEN-LAST:event_moveMouseClicked

    private void resizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resizeMouseClicked
currentorder="Resize";        
// TODO add your handling code here:
    }//GEN-LAST:event_resizeMouseClicked

    private void loadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadMouseClicked
        // TODO add your handling code here:
        LoadGui s = new LoadGui((Controller) d);
        s.setVisible(true);
    }//GEN-LAST:event_loadMouseClicked

    private void saveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveMouseClicked
        // TODO add your handling code here:
        SaveGui s = new SaveGui((Controller) d);
        s.setVisible(true);
    }//GEN-LAST:event_saveMouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        repaint();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        d.undo();
        System.out.println(d.getShapes().length);
        repaint();
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        // TODO add your handling code here:
        d.redo();
        System.out.println(d.getShapes().length);
        repaint();
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // TODO add your handling code here:
        currentorder="Delete";
    }//GEN-LAST:event_jLabel5MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gui().setVisible(true);
            }
        });
    }
    public void paint(Graphics g) {
		super.paint(g); // To change body of generated methods, choose Tools | Templates.
		d.refresh(g);
                if(s3!=null){
                    drawtemp.refresh(g, s3);
                }
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel changeColor;
    private javax.swing.JLabel color;
    private javax.swing.JLabel copy;
    private javax.swing.JLabel drawCircle;
    private javax.swing.JLabel drawEllipse;
    private javax.swing.JLabel drawLine;
    private javax.swing.JLabel drawRectangle;
    private javax.swing.JLabel drawSquare;
    private javax.swing.JLabel drawTriangle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel load;
    private javax.swing.JLabel move;
    private javax.swing.JLabel paste;
    private javax.swing.JLabel resize;
    private javax.swing.JLabel save;
    private javax.swing.JLabel select;
    // End of variables declaration//GEN-END:variables
}
